{"tagline":"Implementation of binary heaps data structure in pure Lua","google":"UA-33850683-1","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"#Binary-Heaps#\r\nImplementation of *binary heaps* data structure in pure Lua\r\n\r\n\t\r\n##Usage##\r\nAdd 'binary_heap.lua' file inside your project.\r\nCall it using require command.\r\nIt will return a table containing a set of functions, acting as a class.\r\n\t\r\n##Functions Overview##\r\n\t\theap:new()  : Returns a new heap ( a Min-Heap by default).\r\n\t\theap()      : Same as heap:new()\r\n\t\t\r\n\t\theap:empty() : Checks if a heap is empty.\r\n\t\theap:getSize() : Returns the size of the heap.\r\n\t\theap:clear() : Clears a heap\r\n\t\theap:leftChildIndex(index) : Returns the left child index of element at position index in the heap\r\n\t\theap:rightChildIndex(index) : Returns the right child index of element at position index in the heap\r\n\t\theap:parentIndex(index) : Returns the parent index of element at position index in the heap\r\n\t\theap:insert(value,linkedData) : Inserts value with linked data in the heap and percolates it up at its proper place.\r\n\t\theap:replace(value,linkedData) : Saves the top of the heap, adds a new element at the top and reorders the heap. \t\t\r\n\t\theap:pop() : Pops the top element, reorders the heap and returns this element unpacked : value first then data linked\r\n\t\theap:checkIndex() : checks existence of an element at position index in the heap.\r\n\t\theap:reset(function) : Reorders the current heap regards to the new comparison function given as argument\r\n\t\theap:merge(other) : merge the current heap with another\r\n\t\theap:isValid() : Checks if a heap is valid\r\n\t\theap:heap() : Restores the heap property (in case the heap was earlier found non-valid)\t\t\r\n\r\n##Additionnal features##\r\n\t\th1+h2 : Returns a new heap with all data stored inside h1 and h2 heaps\r\n\t\ttostring(h) : Returns a string representation of heap h\r\n\t\tprint(h) : Prints current heap h as a string\r\n\r\nBy default, you create Min-heaps. If you do need 'Max-heaps', you can easily create them this way:\r\n\t\tlocal comp = function(a,b) return a>b end\r\n\t\tlocal myHeap = heap(comp)\r\n\t\t\r\n##Participating Libraries\r\n* [Lua Class System][]\r\n\t\t\r\n#Documentation used#\r\n* [Algolist.net data structure course][]\r\n* [Victor S.Adamchik's Lecture on Cs.cmu.edu][]\r\n* [RPerrot's Article on Developpez.com][]\r\n\r\n##License##\r\nThis work is under MIT-LICENSE\r\nCopyright (c) 2012 Roland Yonaba\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a\r\n    copy of this software and associated documentation files (the\r\n    \"Software\"), to deal in the Software without restriction, including\r\n    without limitation the rights to use, copy, modify, merge, publish,\r\n    distribute, sublicense, and/or sell copies of the Software, and to\r\n    permit persons to whom the Software is furnished to do so, subject to\r\n    the following conditions:\r\n    \r\n    The above copyright notice and this permission notice shall be included\r\n    in all copies or substantial portions of the Software.\r\n    \r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n[Algolist.net data structure course]: http://www.algolist.net/Data_structures/Binary_heap/Array-based_int_repr\r\n[Victor S.Adamchik's Lecture on Cs.cmu.edu]: http://www.cs.cmu.edu/~adamchik/15-121/lectures/Binary%20Heaps/heaps.html\r\n[RPerrot's Article on Developpez.com]: http://rperrot.developpez.com/articles/algo/structures/arbres/\r\n[Lua Class System]: http://yonaba.github.com/Lua-Class-System/","name":"Binary-heaps"}